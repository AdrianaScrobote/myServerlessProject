# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myserverlessproject
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: serverlessUser
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    tableNameWebsocket: ${self:custom.tableNameWebsocket}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
            - sns:SetSMSAttributes
            - sns:Publish
            - comprehend:*
          Resource: "*"
  apiGateway:
    apiKeys:
      - free:
          - myFreeApiKey
      - paid:
          - myPaidApiKey
          - user2PaidApiKey
    usagePlan:
      - free:
          quota:
            limit: 1000
            period: MONTH
          throttle:
            rateLimit: 5
            burstLimit: 20
      - paid:
          quota:
            limit: 10000
            period: MONTH
          throttle:
            rateLimit: 50
            burstLimit: 200

plugins:
  - serverless-s3-sync

package:
  individually: true

custom:
  tableName: player-points
  tableNameWebsocket: WebsocketUsers
  bucketName: my-new-bucket-testando-adriana-aaa13
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

functions:
  hello:
    handler: handler.hello

  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
          private: true

  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true

  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method: POST
          cors: true

  updatePlayerScore:
    handler: lambdas/endpoints/updatePlayerScore.handler
    events:
      - http:
          path: update-player-score/{ID}
          method: PUT
          cors: true

  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true

  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true

  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - http:
          path: send-email
          method: POST
          cors: true

  websocket-connect:
    handler: lambdas/websockets/connect.handler
    events:
      - websocket:
          route: $connect

  websocket-disconnect:
    handler: lambdas/websockets/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  websocket-default:
    handler: lambdas/websockets/default.handler
    events:
      - websocket:
          route: $default

  websocket-message:
    handler: lambdas/websockets/message.handler
    events:
      - websocket:
          route: message

  sendSMS:
    handler: lambdas/endpoints/sendSMS.handler
    events:
      - http:
          path: send-sms
          method: POST
          cors: true

  analyse:
    handler: lambdas/endpoints/analyse.handler
    events:
      - http:
          path: analyse
          method: POST
          cors: true

  sendReminder:
    handler: lambdas/scheduleTasks/reminderEmail.handler
    events:
      - schedule: cron(0 9 ? * 7 *)

  sendMorningNews:
    handler: lambdas/scheduleTasks/morningNews.handler
    events:
      - schedule: cron(15 7 ? * * *)

  proxy:
    handler: lambdas/endpoints/proxy.handler
    events:
      - http:
          path: chuck-norris/{proxy+}
          method: ANY
          integration: http-proxy
          request:
            uri: https://api.chucknorris.io/{proxy}
            parameters:
              paths:
                proxy: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    WebsocketUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNameWebsocket}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    myAssumeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: myAssumeRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
